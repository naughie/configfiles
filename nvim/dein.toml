[[plugins]]
repo = 'Shougo/dein.vim'

# not compatible with coc
#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#hook_add = '''
#let g:deoplete#enable_at_startup = 1
#'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
call ddu#custom#patch_local('filer', {
    \   'ui': 'filer',
    \   'sources': [{'name': 'file', 'params': {}}],
    \   'sourceOptions': {
    \     'file': {
    \       'columns': ['icon_filename'],
    \     },
    \   },
    \   'columnParams': {
    \     'icon_filename': {
    \       'defaultIcon': {'icon': 'ï…œ'},
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \   'uiParams': {
    \     'filer': {
    \       'split': 'floating',
    \     }
    \   },
    \ })

nnoremap <silent> <C-e> :call ddu#start({ 'name': 'filer' })<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-kind-file'
[[plugins]]
repo = 'Shougo/ddu-source-file'
[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
hook_add = '''
autocmd FileType ddu-filer call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#filer#do_action('itemAction')<CR>
  nnoremap <buffer><silent> N
        \ <Cmd>call ddu#ui#filer#do_action('itemAction',
        \ {'name': 'newFile'})<CR>
  nnoremap <buffer><silent> K
        \ <Cmd>call ddu#ui#filer#do_action('itemAction',
        \ {'name': 'newDirectory'})<CR>
  nnoremap <buffer><silent> D
        \ <Cmd>call ddu#ui#filer#do_action('itemAction',
        \ {'name': 'delete'})<CR>
  nnoremap <buffer><silent> r
        \ <Cmd>call ddu#ui#filer#do_action('itemAction',
        \ {'name': 'rename'})<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#filer#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> o
        \ <Cmd>call ddu#ui#filer#do_action('expandItem',
        \ {'mode': 'toggle'})<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>
endfunction
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = '0'
rev = 'release'
hook_add = '''
let g:coc_global_extensions = ['coc-snippets', 'coc-tsserver', 'coc-deno', 'coc-rust-analyzer', 'coc-json', 'coc-pyright']

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <leader><space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
'''

#[[plugins]]
#repo = 'jacoborus/tender.vim'
#hook_add = '''
#colorscheme tender
#'''

[[plugins]]
repo = 'sainnhe/everforest'
hook_add = '''
set bg=dark
"set bg=light
let g:everforest_background = 'soft'
let g:everforest_better_performance = 1
"let g:everforest_transparent_background = 1
let g:everforest_sign_column_background = 'gray'
let g:everforest_diagnostic_text_highlight = 1
let g:everforest_diagnostic_virtual_text = 'colored'
colorscheme everforest
'''
